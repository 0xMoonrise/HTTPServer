// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one

INSERT INTO chirp (id, created_at, updated_at, body, user_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, body, user_id
`

type CreateChirpParams struct {
	Body   string    `json:"body"`
	UserID uuid.UUID `json:"user_id"`
}

// CHIRP
func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.Body, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, email
`

type CreateUserParams struct {
	Email          string `json:"email"`
	HashedPassword string `json:"hashed_password"`
}

type CreateUserRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Email     string    `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const existChirpById = `-- name: ExistChirpById :one
SELECT EXISTS(SELECT 1 FROM chirp WHERE id = $1)
`

func (q *Queries) ExistChirpById(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, existChirpById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const existUser = `-- name: ExistUser :one
SELECT EXISTS(SELECT 1 FROM users WHERE email = $1)
`

func (q *Queries) ExistUser(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, existUser, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const existUserById = `-- name: ExistUserById :one
SELECT EXISTS(SELECT 1 FROM users WHERE id = $1)
`

func (q *Queries) ExistUserById(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRowContext(ctx, existUserById, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getChirpById = `-- name: GetChirpById :one
SELECT 
	id, 
	created_at, 
	updated_at, 
	body, 
	user_id 
FROM chirp 
WHERE id = $1
`

func (q *Queries) GetChirpById(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirpById, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const getChirps = `-- name: GetChirps :many
SELECT id, created_at, updated_at, body, user_id FROM chirp
`

func (q *Queries) GetChirps(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
	id,
	created_at,
	updated_at,
	email
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Email     string    `json:"email"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const getUserPassword = `-- name: GetUserPassword :one

SELECT
	hashed_password
FROM users
WHERE email = $1
`

func (q *Queries) GetUserPassword(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserPassword, email)
	var hashed_password string
	err := row.Scan(&hashed_password)
	return hashed_password, err
}

const wipeUsers = `-- name: WipeUsers :exec
DELETE FROM users
`

func (q *Queries) WipeUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, wipeUsers)
	return err
}
